diff --git a/Makefile b/Makefile
index 2d2b9e4..79e708d 100644
--- a/Makefile
+++ b/Makefile
@@ -177,6 +177,8 @@ UPROGS=\
 	_zombie\
 	_shm_cnt\
 	_null\
+	_lab3test\
+	_testprog\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/exec.c b/exec.c
index b40134f..d73dbf3 100644
--- a/exec.c
+++ b/exec.c
@@ -62,11 +62,17 @@ exec(char *path, char **argv)
 
   // Allocate two pages at the next page boundary.
   // Make the first inaccessible.  Use the second as the user stack.
-  sz = PGROUNDUP(sz);
+  /*sz = PGROUNDUP(sz);
   if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
     goto bad;
   clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
-  sp = sz;
+  sp = sz;*/
+
+  //lab3
+  if((sp = allocuvm(pgdir, (STACKTOP-PGSIZE), STACKTOP)) == 0)
+      goto bad;
+  curproc->stackpages = 1;
+  //lab3
 
   // Push argument strings, prepare rest of stack in ustack.
   for(argc = 0; argv[argc]; argc++) {
diff --git a/memlayout.h b/memlayout.h
index 70c1968..64672d6 100644
--- a/memlayout.h
+++ b/memlayout.h
@@ -13,3 +13,7 @@
 
 #define V2P_WO(x) ((x) - KERNBASE)    // same as V2P, but without casts
 #define P2V_WO(x) ((x) + KERNBASE)    // same as P2V, but without casts
+
+//lab3
+#define STACKTOP (KERNBASE)
+//lab3
\ No newline at end of file
diff --git a/proc.h b/proc.h
index 1647114..0e3904e 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,9 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  //lab3
+  uint stackpages;
+  //lab3
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index 94ef3c9..34012d0 100644
--- a/syscall.c
+++ b/syscall.c
@@ -17,9 +17,12 @@
 int
 fetchint(uint addr, int *ip)
 {
-  struct proc *curproc = myproc();
+  //struct proc *curproc = myproc();
 
-  if(addr >= curproc->sz || addr+4 > curproc->sz)
+  //if(addr >= curproc->sz || addr+4 > curproc->sz)
+  //lab3
+  if(addr >= STACKTOP || addr+4 > STACKTOP)
+  //lab3
     return -1;
   *ip = *(int*)(addr);
   return 0;
@@ -32,12 +35,18 @@ int
 fetchstr(uint addr, char **pp)
 {
   char *s, *ep;
-  struct proc *curproc = myproc();
+  //struct proc *curproc = myproc();
 
-  if(addr >= curproc->sz)
+  //if(addr >= curproc->sz)
+  //lab3
+  if(addr >= STACKTOP)
+  //lab3
     return -1;
   *pp = (char*)addr;
-  ep = (char*)curproc->sz;
+  //ep = (char*)curproc->sz;
+  //lab3
+  ep = (char*)STACKTOP;
+  //lab3
   for(s = *pp; s < ep; s++){
     if(*s == 0)
       return s - *pp;
@@ -59,11 +68,14 @@ int
 argptr(int n, char **pp, int size)
 {
   int i;
-  struct proc *curproc = myproc();
+  //struct proc *curproc = myproc();
  
   if(argint(n, &i) < 0)
     return -1;
-  if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
+  //if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
+  //lab3
+  if(size < 0 || (uint)i >= STACKTOP || (uint)i+size > STACKTOP)
+  //lab3
     return -1;
   *pp = (char*)i;
   return 0;
diff --git a/trap.c b/trap.c
index 41c66eb..67d1cd1 100644
--- a/trap.c
+++ b/trap.c
@@ -78,6 +78,20 @@ trap(struct trapframe *tf)
     lapiceoi();
     break;
 
+//lab3
+case T_PGFLT:
+if(rcr2() < (STACKTOP-myproc()->stackpages*PGSIZE))
+{
+    if(allocuvm(myproc()->pgdir, (STACKTOP-myproc()->stackpages*PGSIZE)-PGSIZE, (STACKTOP-myproc()->stackpages*PGSIZE)) == 0)
+    {
+        exit();
+    }
+    myproc()->stackpages +=1;
+    cprintf("Increased stack size\n");
+}
+break;
+//lab3
+
   //PAGEBREAK: 13
   default:
     if(myproc() == 0 || (tf->cs&3) == 0){
diff --git a/vm.c b/vm.c
index f623aa3..28cf916 100644
--- a/vm.c
+++ b/vm.c
@@ -224,7 +224,7 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
   char *mem;
   uint a;
 
-  if(newsz >= KERNBASE)
+  if(newsz > KERNBASE)
     return 0;
   if(newsz < oldsz)
     return oldsz;
@@ -335,6 +335,24 @@ copyuvm(pde_t *pgdir, uint sz)
     if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0)
       goto bad;
   }
+
+//lab3
+for(i = (STACKTOP-myproc()->stackpages*PGSIZE); i < STACKTOP; i += PGSIZE)
+{
+    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
+        panic("copyuvm: pte should exist");
+    if(!(*pte & PTE_P))
+        panic("copyuvm: page not present");
+    pa = PTE_ADDR(*pte);
+    flags = PTE_FLAGS(*pte);
+    if((mem = kalloc()) == 0)
+        goto bad;
+    memmove(mem, (char*)P2V(pa), PGSIZE);
+    if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0)
+        goto bad;
+}
+//lab3
+
   return d;
 
 bad:
